name: 'Code Analyzer Action'
description: 'GHA to run Code Analyzer'
author: 'Roopa Mohan'
inputs:
  runtype:
    required: false
    description: 'Type of run. Valid values are "simple", "dfa". Defaults to "simple".'
    type: string
    default: 'simple'
  severitythreshold:
    required: true
    description: 'Fail run when violation severity equals or exceeds this number'
    default: 3
  engine:
    required: false
    description: 'Provide comma-separated values of Code Analyzer engine(s) to excecute. Defaults to Code Analyzer defaults based on runtype.'
    type: string
  projectdir:
    required: false
    description: 'Path to project repository. Necessary when invoking sfge engine. Defaults to current directory.'
    type: string

runs:
  using: 'composite'
  steps:

  #### Part 1 - User input validation ####

  # Validate runtype and derive code analyzer command to execute
    - id: input-validations-start
      uses: actions/github-script@v6
      with:
        script: |
          core.startgroup

    - id: populate-command
      run: |
        echo "Populating command . . ."
        if [[ "${{ inputs.runtype }}" == 'simple' ]]; then
          COMMAND="scanner:run"
        elif [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          COMMAND="scanner:run:dfa"
        else
          echo "Unsupported runtype: ${{ inputs.runtype }}"
          exit 10
        fi
        echo "Command=$COMMAND" >> $GITHUB_OUTPUT
      shell: bash


  # Populate --outfile
    - id: populate-outfile
      run: |
        echo "Populating outfile . . ."
        OUTFILE="--outfile \"${{ inputs.outfile }}\""
        echo "Outfile=$OUTFILE" >> $GITHUB_OUTPUT
      shell: bash


  # Populate --engine value based on input
    - id: populate-engine
      run: |
        echo "Populating parameters . . ."
        if [[ "${{ inputs.engine }}" == "" ]]; then
          ENGINE=""
          echo "No specific engine requested. Using defaults"
        else
          ENGINE="--engine \"${{ inputs.engine }}\""
        fi
        echo "Engine=$ENGINE" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --severitythreshold
    - id: populate-sevthreshold
      run: |
        echo "Populating severitythreshold . . ."
        SEVTHRESHOLD="--severity-threshold ${{ inputs.severitythreshold}} "
        echo "SevThreshold=$SEVTHRESHOLD" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --projectdir if necessary
    - id: populate-projdir
      run: |
        echo "Evaluating need for projectdir . . ."
        if [[ "${{ inputs.engine}}" = *"sfge"* ]]; then
          PROJDIR_NEEDED="true"
          PROJDIR="--projectdir \"${{ inputs.projectdir }}\""
          echo "Input engine contains sfge. Project dir param = $PROJDIR"
        elif [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          PROJDIR_NEEDED="true"
          PROJDIR="--projectdir \"${{ inputs.projectdir }}\""
          echo "Run type is DFA. Project dir needed = $PROJDIR"
        else
          PROJDIR_NEEDED=
          PROJDIR=
          echo "Project dir is not needed"
        fi
        if [[ -n "$PROJDIR_NEEDED" && -z "${{ inputs.projectdir }}" ]]; then
          echo "'projectdir' is a required when invoking sfge. Add and rerun."
          exit 10
        fi
        echo "ProjDir=$PROJDIR" >> $GITHUB_OUTPUT
      shell: bash

    - name: Display derived information
      run: |
        echo "Confirming parameters . . ."
        echo "Command = ${{steps.populate-command.outputs.Command}}"
        echo "Outfile = ${{steps.populate-outfile.outputs.Outfile}}"
        echo "Engine = ${{steps.populate-engine.outputs.Engine}}"
        echo "ProjDir = ${{steps.populate-projdir.outputs.ProjDir}}"
        echo "SevThreshold = ${{steps.populate-sevthreshold.outputs.SevThreshold}}"
      shell: bash

    - id: input-validations-end
      uses: actions/github-script@v6
      with:
        script: |
          core.endgroup

  #### Part 2 - Setup dependencies ####

  # Setup node
    - uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

  # Setup JVM
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Salesforce CLI
      run: |
        echo "Installing Salesforce CLI . . ."
        npm install -g sfdx-cli
      shell: bash

    - name: Install Salesforce Code Analyzer
      run: |
        echo "Installing Code Analyzer . . ."
        sfdx plugins:install @salesforce/sfdx-scanner
      shell: bash

  #### Part 3 - Checkout code and determine target files
    - uses: actions/checkout@v3

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: ${{ inputs.targethome }}

    - id: populate-target
      shell: bash
      run: |
        TARGET_LIST=""
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          TARGET_LIST=$file,$TARGET_LIST
        done
        TARGET="--target ${TARGET_LIST::-1}"
        echo "Target=$TARGET" >> $GITHUB_OUTPUT


  #### Part 3 - Execute code analyzer ####

    - run: mkdir -p $HOME/sfca
      shell: bash

    - name: Execute Code Analyzer
      id: code-analyzer
      run: |
        sfdx ${{steps.populate-command.outputs.Command}} \
          ${{steps.populate-target.outputs.Target}} \
          ${{steps.populate-engine.outputs.Engine}} \
          ${{steps.populate-projdir.outputs.ProjDir}} \
          ${{steps.populate-sevthreshold.outputs.SevThreshold}} \
          ${{steps.populate-outfile.outputs.Outfile}} \
        > command_output.txt
      shell: bash
      continue-on-error: true

#FIXME: This step should handle when no file was created because of an error
    - id: collect-results
      shell: bash
      run: |
# cat command_output.txt
# RESULTS_CREATED=$(grep 'Rule violations were written' command_output.txt)
        
        if [[ -e sfca_results.json ]]; then
          JSON_OUTPUT=$(cat sfca_results.json)
        elif [[ -z $RESULTS_CREATED ]]; then
          JSON_OUTPUT="Encountered an error during execution."
        else
          JSON_OUTPUT=""
        fi
        echo "JsonOutput=$JSON_OUTPUT" >> $GITHUB_OUTPUT

    - name: Translate results into markdown
      uses: rmohan20/code-analyzer-pr-buddy@tsaction
      with:
        jsonstring: "${{ steps.collect-results.outputs.JsonOutput }}"
        runtype: ${{ inputs.runtype }}

# FIXME: error message should be different if code analyzer ran into errors
    - if: ${{steps.code-analyzer.outcome}} == "failure"
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed("Code Analyzer detected violations")
